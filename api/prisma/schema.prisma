generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  firstName String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  email     String    @unique @db.VarChar(50)
  password  String?   @db.VarChar(70)
  createdAt DateTime  @default(now()) @db.Timestamp()
  Login     Login?
  Prifle    Profile?
  Comment   Comment[]
}

enum LoginSort {
  GITHUB
  GOOGLE
  SYSTEM
}

model Login {
  id         Int       @id @unique @default(autoincrement())
  sort       LoginSort @default(SYSTEM)
  lastLogout DateTime? @db.Timestamp()
  hashedRt   String?   @unique @db.Text
  isVerified Boolean
  userId     String    @unique @db.VarChar(36)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          Int      @id @unique @default(autoincrement())
  image       String?  @db.Text
  bio         String?  @db.VarChar(200)
  websiteLink String?  @db.Text
  websiteName String?  @db.VarChar(50)
  createdAt   DateTime @default(now()) @db.Timestamp()
  userId      String   @unique @db.VarChar(36)
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Post        Post[]
}

model Post {
  id        Int       @id @unique @default(autoincrement())
  text      String?   @db.Text
  media     String?   @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp()
  profileId Int
  Profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Comment   Comment[]
}

model Comment {
  id        Int       @id @unique @default(autoincrement())
  text      String?   @db.Text
  media     String?   @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp()
  parentId  Int?
  postId    Int
  userId    String
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentToReplies")
}
